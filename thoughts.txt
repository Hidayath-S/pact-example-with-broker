usual approach
- **client writes the tests for the pact files** and thus specifies behaviour of the service
- when client is tested, pact file is uploaded to broker with tag for a certain service
- when a service is tested, it pulls the pacts specified for him from the borker and verifies its behaviour according to the pacts
=>
    problem, when a client tests, the tests are always green. the client would have to trigger a service test to see, whether
    the client's behaviour is right!

service-centric approach
- **a service generates the pact files** and uploads them to the broker
- clients pull those files and client-devs write their tests accordingly to this behaviour
    - if a behaviour is needed, the service-dev must specify it!
    - so every time a client tests, the behaviour of the service is "real"
- a pact-stub-server is needed so, that the client can just start the service and use it as external api in tests
    - client tests are just tests and do not have pact stuff in them (except starting the mock-service with pact file)
    - https://github.com/pact-foundation/pact-stub-server

problem with modified approach compared to usual approach
- usual:
    when the service should be deployed, CI is performed. so all pact files for the service are verified. this happens
    by the service pulling all pact files generated by clients FOR THE SERVICE from the broker. if green,
    service can be deployed, as clients are not affected/api is not broken. if red, service CAN NOT be deployed, as the
    clients ARE affected.
    => of course, clients can not be sure, that their contracts are valid, UNTIL the service has been tested with them!
- modified:
    clients just use the pacts for a local mock-service, so that they can test independently. as the pacts are
    managed by the service, the tests and pact-verifications on the service will always be green, so the service can
    always be deployed. BUT THEN some clients may be affected, as the service api may have changed.
    the tests/verifications have not noticed the break, as they were just modified along the api-modifications, to provide
    the new mock-behaviour to the clients.
    => could be fixed by only MANUALLY updating the contracts/pact files. so service with api-changes would be tested
       against "old" contracts, which would break. so a new contract version would be introduced. the clients would
       still test against the "old" contract, but the new service would be deployed. then also service-api-versioning
       would be needed, so that the client really calls the "old" api


questions??
- versioning? the client has to pull the pacts for the service in the dependency version
    - or the service has to pull the pact version matching his version, so that verification makes sense. NOT e.g. the
      latest versions the clients provided!
- can the client-tests be run against a deployed service? so that we can test the reality? there are a lot of pact
  stuff in the tests...